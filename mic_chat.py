# -*- coding: utf-8 -*-
"""mic_chat

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Ei3nfgH_cdVVbbmd-_EQurgt7s4rvQs
"""



import streamlit as st
from streamlit_webrtc import webrtc_streamer, AudioProcessorBase
import av
import numpy as np
import queue
import threading
import time
from gtts import gTTS
import os
from tempfile import NamedTemporaryFile

# --- Audio-to-Text Mock Example (no real STT here)
class AudioProcessor(AudioProcessorBase):
    def __init__(self):
        self.audio_queue = queue.Queue()

    def recv(self, frame: av.AudioFrame) -> av.AudioFrame:
        pcm = frame.to_ndarray()
        self.audio_queue.put(pcm)
        return frame

st.title("ðŸŽ¤ Voice Input ChatBot (Mock)")

webrtc_ctx = webrtc_streamer(
    key="mic",
    audio_receiver_size=1024,
    media_stream_constraints={"audio": True},
    audio_processor_factory=AudioProcessor,
)

if st.button("Simulate Response ðŸŽ§"):
    text = "Welcome to KCET. How can I help you?"
    tts = gTTS(text)
    with NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
        tts.save(fp.name)
        audio_path = fp.name

    audio_file = open(audio_path, "rb")
    audio_bytes = audio_file.read()
    st.audio(audio_bytes, format="audio/mp3")
    os.remove(audio_path)

