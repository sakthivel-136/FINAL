# -*- coding: utf-8 -*-
"""mic_chat

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Ei3nfgH_cdVVbbmd-_EQurgt7s4rvQs
"""



import gradio as gr
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
import speech_recognition as sr

# Load model
df = pd.read_csv("kamaraj_college_faq.csv")
df.dropna(inplace=True)

le = LabelEncoder()
df["Answer_Label"] = le.fit_transform(df["Answer"])

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df["Question"])
y = df["Answer_Label"]

model = LogisticRegression()
model.fit(X, y)

# Recognize speech from audio file
def transcribe_audio(audio_file):
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_file) as source:
        audio = recognizer.record(source)
    try:
        return recognizer.recognize_google(audio)
    except:
        return "‚ùå Sorry, could not understand the audio."

# Main prediction function
def get_answer(text, audio):
    if not text and audio is None:
        return "‚ö†Ô∏è Please provide text or voice input."

    if audio is not None and not text:
        text = transcribe_audio(audio)
    
    if not text.strip():
        return "‚ö†Ô∏è No understandable input provided."

    vector = vectorizer.transform([text])
    pred_label = model.predict(vector)[0]
    answer = le.inverse_transform([pred_label])[0]
    return f"üü¢ Answer: {answer}"

# Gradio Interface
iface = gr.Interface(
    fn=get_answer,
    inputs=[
        gr.Textbox(label="üìù Type your question", placeholder="Ask a question..."),
        gr.Audio(source="microphone", type="filepath", label="üé§ Or speak your question")
    ],
    outputs="text",
    title="üéì Kamaraj College FAQ Chatbot",
    description="Ask questions related to Kamaraj College using text or voice."
)

iface.launch()
