# -*- coding: utf-8 -*-
"""mic_chat

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Ei3nfgH_cdVVbbmd-_EQurgt7s4rvQs
"""



import streamlit as st
import pandas as pd
import os
import pickle
import tempfile
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import speech_recognition as sr
from gtts import gTTS
import base64

# Constants
VECTOR_FILE = "vectorized.pkl"
CSV_FILE = "kcet.csv"
THRESHOLD = 0.8

# Setup
st.set_page_config(page_title="üéôÔ∏è Voice ChatBot")
st.title("üéôÔ∏è KCET Voice ChatBot")

# Load or vectorize
def load_or_vectorize():
    if os.path.exists(VECTOR_FILE):
        with open(VECTOR_FILE, "rb") as f:
            vectorizer, vectors, df = pickle.load(f)
    else:
        df = pd.read_csv(CSV_FILE)
        df['Question'] = df['Question'].str.strip().str.lower()
        vectorizer = TfidfVectorizer()
        vectors = vectorizer.fit_transform(df['Question'])
        with open(VECTOR_FILE, "wb") as f:
            pickle.dump((vectorizer, vectors, df), f)
    return vectorizer, vectors, df

vectorizer, vectors, df = load_or_vectorize()

# Convert text to audio (TTS)
def speak(text):
    tts = gTTS(text)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
        tts.save(fp.name)
        return fp.name

def play_audio(audio_path):
    with open(audio_path, "rb") as audio_file:
        audio_bytes = audio_file.read()
        b64 = base64.b64encode(audio_bytes).decode()
        st.markdown(
            f'<audio autoplay controls><source src="data:audio/mp3;base64,{b64}" type="audio/mp3"></audio>',
            unsafe_allow_html=True,
        )

# Speech to Text
def recognize_from_mic():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("üé§ Speak now...")
        audio = r.listen(source, phrase_time_limit=5)
    try:
        text = r.recognize_google(audio)
        return text
    except sr.UnknownValueError:
        return "‚ùå Could not understand audio"
    except sr.RequestError:
        return "‚ùå Could not request results"

# Voice button
if st.button("üé§ Speak Question"):
    query = recognize_from_mic()
    st.write(f"**üó£Ô∏è You said:** {query}")

    if query.startswith("‚ùå"):
        st.error(query)
    else:
        query_lower = query.lower().strip()
        query_vec = vectorizer.transform([query_lower])
        similarity = cosine_similarity(query_vec, vectors)
        max_sim = similarity.max()
        max_index = similarity.argmax()

        if max_sim >= THRESHOLD:
            answer = df.iloc[max_index]["Answer"]
        else:
            answer = "‚ùå Sorry, I couldn't find an answer."

        st.success(f"ü§ñ {answer}")
        audio_path = speak(answer)
        play_audio(audio_path)
