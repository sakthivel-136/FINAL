# -*- coding: utf-8 -*-
"""final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDDBJoshY8QJqi1oBTMM4uOt67h2tcKL
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import os
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

VECTOR_FILE = "vectorized.pkl"
CSV_FILE = "kcet.csv"
THRESHOLD = 0.8

# Page config
st.set_page_config(page_title="KCET Chatbot", layout="wide")

# üîß CSS Styles for Background, Chatbox, Logo, College Name
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('download.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        background-attachment: fixed;
    }

    /* Centered fade-in title */
    .center-title {
        position: absolute;
        top: 48%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 42px;
        font-weight: bold;
        text-align: center;
        text-shadow: 2px 2px 5px #000;
        animation: fadeIn 2s ease-in-out forwards;
        opacity: 0;
        z-index: 1;
    }

    /* College logo styling */
    .college-logo {
        position: absolute;
        top: 20%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 120px;
        height: auto;
        animation: fadeIn 2s ease-in-out forwards;
        opacity: 0;
        z-index: 2;
    }

    /* Fade-in animation */
    @keyframes fadeIn {
        to { opacity: 1; }
    }

    /* Chat button */
    .chat-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #0072ff;
        color: white;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        text-align: center;
        font-size: 28px;
        line-height: 60px;
        cursor: pointer;
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        z-index: 9999;
        transition: 0.3s ease;
    }

    .chatbox {
        position: fixed;
        bottom: 100px;
        right: 20px;
        width: 350px;
        background: rgba(255, 255, 255, 0.95);
        padding: 15px;
        border-radius: 20px;
        box-shadow: 0px 0px 15px rgba(0,0,0,0.3);
        z-index: 9998;
    }

    header, footer {visibility: hidden;}
    </style>
    """,
    unsafe_allow_html=True
)

# üè´ Add Logo and College Name in HTML
st.markdown(
    """
    <img src='logo.png' class='college-logo'>
    <div class='center-title'>KAMARAJ COLLEGE OF ENGINEERING AND TECHNOLOGY</div>
    """,
    unsafe_allow_html=True
)

# üì• Load or Vectorize CSV
def load_or_vectorize():
    if os.path.exists(VECTOR_FILE):
        with open(VECTOR_FILE, "rb") as f:
            vectorizer, vectors, df = pickle.load(f)
    else:
        df = pd.read_csv(CSV_FILE)
        df['Question'] = df['Question'].str.strip().str.lower()
        vectorizer = TfidfVectorizer()
        vectors = vectorizer.fit_transform(df['Question'])
        with open(VECTOR_FILE, "wb") as f:
            pickle.dump((vectorizer, vectors, df), f)
    return vectorizer, vectors, df

vectorizer, vectors, df = load_or_vectorize()

# üéõÔ∏è Toggle Chatbot (Sidebar)
with st.sidebar:
    show_chat = st.toggle("üí¨ Toggle Chatbox")

# üí¨ Round Chat Button (Always visible)
st.markdown('<div class="chat-button">üí¨</div>', unsafe_allow_html=True)

# üì¶ Chatbox UI Logic
if show_chat:
    st.markdown('<div class="chatbox">', unsafe_allow_html=True)
    st.markdown("### üó£Ô∏è Ask KCET Bot")
    user_input = st.text_input("Type your question:")
    if user_input:
        query = user_input.strip().lower()
        query_vector = vectorizer.transform([query])
        similarity = cosine_similarity(query_vector, vectors)
        max_sim = similarity.max()
        max_index = similarity.argmax()
        if max_sim >= THRESHOLD:
            st.success(df.iloc[max_index]["Answer"])
        else:
            st.warning("‚ùå Check your question.")
    st.markdown('</div>', unsafe_allow_html=True)

