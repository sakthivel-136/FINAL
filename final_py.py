# -*- coding: utf-8 -*-
"""final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDDBJoshY8QJqi1oBTMM4uOt67h2tcKL
"""
# final.py

import streamlit as st
import pandas as pd
import pickle
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Constants
VECTOR_FILE = "vectorized (3).pkl"
CSV_FILE = "kcet.csv"
THRESHOLD = 0.8

# Set page config
st.set_page_config(page_title="🎓 KCET FAQ Chatbot", layout="centered")

st.markdown("<h1 style='text-align: center;'>🤖 KCET Bot Assistant</h1>", unsafe_allow_html=True)
st.markdown("<hr>", unsafe_allow_html=True)

# Load vectorizer, data
@st.cache_data
def load_or_vectorize():
    if os.path.exists(VECTOR_FILE):
        with open(VECTOR_FILE, "rb") as f:
            vectorizer, vectors, df = pickle.load(f)
    else:
        if not os.path.exists(CSV_FILE):
            st.error("❌ Data file 'kcet.csv' not found!")
            st.stop()
        df = pd.read_csv(CSV_FILE)
        df['Question'] = df['Question'].str.strip().str.lower()
        vectorizer = TfidfVectorizer()
        vectors = vectorizer.fit_transform(df['Question'])
        with open(VECTOR_FILE, "wb") as f:
            pickle.dump((vectorizer, vectors, df), f)
    return vectorizer, vectors, df

vectorizer, vectors, df = load_or_vectorize()

# Session state initialization
if "chat_log" not in st.session_state:
    st.session_state.chat_log = [("🤖", "👋 Hello! I’m your KCET Assistant. Ask me anything about the college or exams.")]

# Chat UI
st.markdown("## 💬 Chat")

# Input box
with st.form(key="chat_form", clear_on_submit=True):
    user_input = st.text_input("Type your question here...", key="user_input")
    submitted = st.form_submit_button("Send")

if submitted and user_input:
    query = user_input.strip().lower()
    try:
        query_vector = vectorizer.transform([query])
        similarity = cosine_similarity(query_vector, vectors)
        max_sim = similarity.max()
        max_index = similarity.argmax()

        if max_sim >= THRESHOLD:
            answer = df.iloc[max_index]["Answer"]
        else:
            answer = "❌ Sorry, I couldn't understand that. Please try rephrasing."

        st.session_state.chat_log.append(("👤", user_input))
        st.session_state.chat_log.append(("🤖", answer))

    except Exception as e:
        st.error(f"⚠️ Error: {e}")

# Chat history display
chat_container = st.container()
with chat_container:
    for speaker, message in st.session_state.chat_log:
        if speaker == "👤":
            st.markdown(f"<div style='background-color:#dff0d8;padding:10px;border-radius:10px;margin:5px 0'><b>{speaker}</b>: {message}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='background-color:#f0f0f0;padding:10px;border-radius:10px;margin:5px 0'><b>{speaker}</b>: {message}</div>", unsafe_allow_html=True)
