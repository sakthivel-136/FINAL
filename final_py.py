# -*- coding: utf-8 -*-
"""final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDDBJoshY8QJqi1oBTMM4uOt67h2tcKL
"""
# final.py

import streamlit as st
import pandas as pd
import pickle
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Constants
VECTOR_FILE = "vectorized (3).pkl"
CSV_FILE = "kcet.csv"
THRESHOLD = 0.8

# Page Config
st.set_page_config(page_title="üéì KCET FAQ Chatbot", layout="centered")

# --- Custom CSS for modern UI ---
st.markdown("""
    <style>
    body {
        background-color: #0f0f0f;
        color: white;
        font-family: 'Segoe UI', sans-serif;
    }
    .chat-container {
        max-width: 700px;
        margin: 0 auto;
    }
    .user-msg, .bot-msg {
        padding: 12px 16px;
        border-radius: 20px;
        margin: 8px 0;
        max-width: 80%;
        word-wrap: break-word;
    }
    .user-msg {
        background-color: #333;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    .bot-msg {
        background-color: #111;
        color: white;
        margin-right: auto;
        text-align: left;
    }
    .input-box input {
        background-color: #1e1e1e;
        color: white;
        border: 1px solid #444;
        border-radius: 8px;
        padding: 12px;
        width: 100%;
    }
    .input-box input:focus {
        border-color: #555;
        outline: none;
    }
    .stButton>button {
        background-color: #444 !important;
        color: white !important;
        border-radius: 8px;
        border: none;
        padding: 10px 16px;
        margin-top: 10px;
    }
    .stButton>button:hover {
        background-color: #666 !important;
    }
    </style>
""", unsafe_allow_html=True)

# App Title
st.markdown("<h1 style='text-align:center;'>ü§ñ KCET Bot Assistant</h1><hr>", unsafe_allow_html=True)

# Load vectorizer and data
@st.cache_data
def load_or_vectorize():
    if os.path.exists(VECTOR_FILE):
        with open(VECTOR_FILE, "rb") as f:
            vectorizer, vectors, df = pickle.load(f)
    else:
        if not os.path.exists(CSV_FILE):
            st.error("‚ùå Data file 'kcet.csv' not found!")
            st.stop()
        df = pd.read_csv(CSV_FILE)
        df['Question'] = df['Question'].str.strip().str.lower()
        vectorizer = TfidfVectorizer()
        vectors = vectorizer.fit_transform(df['Question'])
        with open(VECTOR_FILE, "wb") as f:
            pickle.dump((vectorizer, vectors, df), f)
    return vectorizer, vectors, df

vectorizer, vectors, df = load_or_vectorize()

# Session state
if "chat_log" not in st.session_state:
    st.session_state.chat_log = [("ü§ñ", "üëã Hello! I'm your KCET Assistant. Ask me anything about the college or exams.")]

# Input UI
st.markdown("<div class='chat-container'>", unsafe_allow_html=True)

with st.form("chat_form", clear_on_submit=True):
    st.markdown("<div class='input-box'>", unsafe_allow_html=True)
    user_input = st.text_input("Type your question here...", label_visibility="collapsed", key="input_text")
    st.markdown("</div>", unsafe_allow_html=True)
    submitted = st.form_submit_button("Send")

if submitted and user_input:
    query = user_input.strip().lower()
    try:
        query_vector = vectorizer.transform([query])
        similarity = cosine_similarity(query_vector, vectors)
        max_sim = similarity.max()
        max_index = similarity.argmax()

        if max_sim >= THRESHOLD:
            answer = df.iloc[max_index]["Answer"]
        else:
            answer = "‚ùå Sorry, I couldn't understand that. Please try rephrasing."

        st.session_state.chat_log.append(("üë§", user_input))
        st.session_state.chat_log.append(("ü§ñ", answer))

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error: {e}")

# Display chat history
for speaker, msg in st.session_state.chat_log:
    css_class = "user-msg" if speaker == "üë§" else "bot-msg"
    st.markdown(f"<div class='{css_class}'><b>{speaker}</b>: {msg}</div>", unsafe_allow_html=True)

st.markdown("</div>", unsafe_allow_html=True)

