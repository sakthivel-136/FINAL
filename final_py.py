# -*- coding: utf-8 -*-
"""final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDDBJoshY8QJqi1oBTMM4uOt67h2tcKL
"""
import streamlit as st
import pandas as pd
import pickle
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Constants
VECTOR_FILE = "vectorized (3).pkl"
CSV_FILE = "kcet.csv"
THRESHOLD = 0.8

# Set page layout
st.set_page_config(page_title="KCET FAQ Chatbot", layout="centered")
st.title("🎓 KCET Bot Assistant")

# Load or create vectorizer, vectors and dataframe
def load_or_vectorize():
    if os.path.exists(VECTOR_FILE):
        with open(VECTOR_FILE, "rb") as f:
            vectorizer, vectors, df = pickle.load(f)
    else:
        if not os.path.exists(CSV_FILE):
            st.error("❌ Data file 'kcet.csv' not found!")
            st.stop()
        df = pd.read_csv(CSV_FILE)
        df['Question'] = df['Question'].str.strip().str.lower()
        vectorizer = TfidfVectorizer()
        vectors = vectorizer.fit_transform(df['Question'])
        with open(VECTOR_FILE, "wb") as f:
            pickle.dump((vectorizer, vectors, df), f)
    return vectorizer, vectors, df

vectorizer, vectors, df = load_or_vectorize()

# Chat interface
st.subheader("Ask your question below:")

if "chat_log" not in st.session_state:
    st.session_state.chat_log = []

user_input = st.text_input("💬 Type your question:")

if user_input:
    query = user_input.strip().lower()
    try:
        query_vector = vectorizer.transform([query])
        similarity = cosine_similarity(query_vector, vectors)
        max_sim = similarity.max()
        max_index = similarity.argmax()

        if max_sim >= THRESHOLD:
            answer = df.iloc[max_index]["Answer"]
        else:
            answer = "❌ Sorry, I couldn't understand that. Please rephrase."

        st.session_state.chat_log.append((user_input, answer))

    except Exception as e:
        st.error(f"⚠️ Error: {e}")

# Display chat history
for q, a in st.session_state.chat_log:
    st.markdown(f"**👤 You:** {q}")
    st.markdown(f"**🤖 Bot:** {a}")
